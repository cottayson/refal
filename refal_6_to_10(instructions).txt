6. Удалить все нули из‍ последовательности цифр.

$ENTRY Go { 
= <Print <DelZeros 1 0 0 0 2 0>>;
}
/*
функция DelZeros использует образец подстановки с тремя термами:
	а) e.1 - первая часть списка, для списка  1 0 0 0 2 0 на первой итерации будет равна 1
	б) 0   - число которое будет зажато между двумя частями списка, для списка 1 0 0 0 2 0 это самый левый ноль
	в) e.2 - вторая часть списка, для списка  1 0 0 0 2 0 на первой итерации будет равна 0 0 2 0
*/
DelZeros {

  e.1 0 e.2 = <DelZeros e.1 e.2>; // нуль 100% тут обитает
  
  e.1 = e.1; // если мы пришли к этой строчке кода, то нуля точно нет, значит ничего не делаем
  
}

// ВАЖНО!!!
/* если входная последовательность будет задавыться строкой типа такой вот '0102000',
   то решение задачи немного изменится:
*/
$ENTRY Go { 
= <Print <DelZeros '0102000'>>;
}

DelZeros {
  e.1 '0' e.2 = <DelZeros e.1 e.2>;
  e.1 = e.1;
}

7. Дана последовательность длинных чисел (каждое из‍ которых завёрнуто в‍ скобочный терм). После каждого отрицательного числа вставить число 33.
/*
исходя из справки РЕФАЛА отрицательное число задаётся как '-'модуль числа
*/
$ENTRY Go { 
= <Print <Add33 ('-'35756) (5567) ('-'299)> >;
}

Add33 {
  '' = ;  // раз функция вызывает сама себя и уменьшает число своих аргументов, то она рано или поздно схлопнется до <Add33>, поэтому без этой строчки никак

  
  e.left ('-'s.number) e.right = 
    e.left ('-'s.number) (33) <Add33 e.right>;
	
/*
	<Add33 e.right> рекурсивный вызов функции Add33 для правой части списка e.right
*/
  
  /*
  e.left - левая часть списка, не содержащая отрицательных чисел
  e.right - правая ...
  
  s.number  - модуль отрицательного числа
  
  ПРИМЕЧАНИЕ: Скобки видимо нужны чтобы облегчить написание программы
  */
  
	
  e.1 = e.1 STOP;
}

8. Дана последовательность чисел. Найти среднее арифметическое элементов списка.

$ENTRY Go { 
= <Print <Mean 10 30>>;
}
/*
ищем среднее арифметическое по формуле (a1 + a2 + a3 + ... + an) / n
т.е. нам нужно сложить все элементы списка, и эту величину поделить на кол-во элементов списка(его длину)
*/

Mean {
  '' = Empty;
  e.seq = <Div <Sum e.seq> <Len e.seq>>; 
  /* 
  <Dev x y> делит x на y 
  <Len e.seq> вычисляет длину списка
  <Sum e.seq> сумму его элементов
  */
  e.1 = e.1 STOP;
}
// Sum рекурсивно вычисляет сумму всех элементов списка
Sum {
  '' = 0;
  s.accum = s.accum;
  s.accum s.left e.right = <Sum <+ s.accum s.left> e.right>;
  
  пример:
  /*  пример: 
  первая итерация:
  <Sum 10 30 5 7 100 200> = <Sum 40 5 7 100 200>
  вторая:
  <Sum 40 5 7 100 200> = <Sum 45 7 100 200>
  и так далее до
  <Sum 53 100 200> = <Sum 153 200> = <Sum 353> затем срабатывает 
  строка кода s.accum = s.accum; и получаем <Sum 353> = 353
  */
  
  e.1 = e.1;
}
// <Fst список> выдаёт первый аргумент списка
Fst {
  s.1 e.1 = s.1;
  e.1 = e.1;
}
// <Lenw список> выдаёт длину и список, а нужна только длина, поэтому берём первый элемент списка
Len {
  e.1 = <Fst <Lenw e.1>>;
}

9. Дана последовательность чисел. Определить, является‍ ли она возрастающей последовательностью. 
Примеры: 1 4 8 10 — является, 1 8 4 10 — не‍ является, пустое выражение — является, 3 (выражение из‍ одного элемента) — является.

$ENTRY Go { 
= <Print <Inc 1 2 3 4>>;
}

Inc {
  '' = True;
  s.1 = True;
  s.1 s.1 e.right = False s.1 '=' s.1;
  s.1 s.2 e.right, <Compare s.1 s.2>: '+' = False s.1 '>' s.2;
  
  s.1 '=' s.1 и s.1 '>' s.2 , которые справа от равно можешь удалить, они для наглядности
  
  s.1 e.right = <Inc e.right>;
  e.1 = Error; 
}

/*
  функцию Inc можешь упростить и заменить алглийские True  и False на русские 'да' и 'нет'
*/
Inc {
  '' = True; // пустое выражение — является по определению задачи
  s.1 = 'да'; // выражение из‍ одного элемента по определению задачи является возрастающей последовательностью
  s.1 s.1 e.right = 'нет'; // если встречаем два одинаковых элемента, то сразу говорим нет
  s.1 s.2 e.right, <Compare s.1 s.2>: '+' = 'нет'; // и если первый s.1 больше второго s.2
  
  /*
  строчка <Compare s.1 s.2>: '+' = 'нет';   читается так:
  если образец  s.1 s.2 e.right подошёл, а также функция <Compare s.1 s.2> равна '+', то выполни подстановку 'нет'
  
  как работает функция от двух аргументов <Compare s.1 s.2>
  
  если x больше y, то <Compare x y> = '+'
  если x меньше y, то <Compare x y> = '-'
  если x равен y, то <Compare x y> = 0
  */
  
  s.1 e.right = <Inc e.right>; // если две верхние строчки не подошли, значит s.1 меньше s.2,
  проверяем дальше все остальные, в конечном итоге если 1-й меньше 2-го, 2-й меньше 3-го, и так далее, то
  последовательность обязатльно будет возрастающей
  e.1 = Error;
}

10. Написать программу, которая определяет количество учеников в‍ классе, чей рост превышает средний.

$ENTRY Go {
= <Print <AboveMean 100 200 290>>;
}
/*
в 10-ой задаче удобно использовать уже написанную функцию Mean из 8-ой задачи.
*/
AboveMean { // определяет количество учеников в‍ классе, чей рост превышает средний(ответ к задаче)
  '' = Empty;
  e.seq = <Above <Mean e.seq> e.seq>;
  e.1 = e.1 STOP;
}
/* 100 200 300 100 -> 2 */
Above { // определяет количество учеников в‍ классе, чей рост превышает некоторое произвольное значение s.value
  '' = Empty;
  s.value e.seq = <DoAbove 0 s.value e.seq>; // это не рекурсия, обычный вызов
  e.1 = e.1 STOP;
}
DoAbove { // рекурсивно вызывает сама себя
  '' = Empty;
  s.count s.value = s.count; // если всё почти посчиталось(список величин роста учеников пуст), то выводим ответ
  
  s.count s.value s.1 e.seq, <Compare s.1 s.value>: '+' = 
	<DoAbove <+ s.count 1> s.value e.seq>;
  // если самый левый элемент списка s.1 > s.value, то
  // увеличиваем счётчик на единицу <+ s.count 1>

	
  s.count s.value s.1 e.seq = 
	<DoAbove s.count s.value e.seq>;
  // иначе ничего не делаем(s.1 ничего не вносит, что его убрать что добавить число учеников s.count не должно меняться)
  
  e.1 = e.1 STOP; // для отладки
}

// все вот эти вот функции из 8-ой задачи, мы их писали уже
Mean {
  '' = Empty;
  e.seq = <Div <Sum e.seq> <Len e.seq>>;
  e.1 = e.1 STOP;
}
Sum {
  '' = 0;
  s.accum = s.accum;
  s.accum s.left e.right = <Sum <+ s.accum s.left> e.right>;
  e.1 = e.1;
}
Fst {
  s.1 e.1 = s.1;
  e.1 = e.1;
}
Len {
  e.1 = <Fst <Lenw e.1>>;
}